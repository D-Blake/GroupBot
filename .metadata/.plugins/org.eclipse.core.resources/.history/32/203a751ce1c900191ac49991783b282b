package GroupDiscordGamerBot;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.security.auth.login.LoginException;

import com.sedmelluq.discord.lavaplayer.player.AudioLoadResultHandler;
import com.sedmelluq.discord.lavaplayer.player.AudioPlayer;
import com.sedmelluq.discord.lavaplayer.player.AudioPlayerManager;
import com.sedmelluq.discord.lavaplayer.player.DefaultAudioPlayerManager;
import com.sedmelluq.discord.lavaplayer.source.AudioSourceManager;
import com.sedmelluq.discord.lavaplayer.tools.FriendlyException;
import com.sedmelluq.discord.lavaplayer.track.*;

import music.AudioPlayerSendHandler;
import music.GuildMusicManager;
import music.PlayerManager;
import music.TrackScheduler;
import net.dv8tion.jda.api.AccountType;
import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.Permission;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.User;
import net.dv8tion.jda.api.entities.VoiceChannel;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.managers.AudioManager;

public class Main extends ListenerAdapter{
	

	public static void main(String[] args) throws LoginException, IOException {
		// TODO Auto-generated method stub
		JDABuilder builder = new JDABuilder(AccountType.BOT);
	    Path path = Paths.get("BotToken.txt");
	    String token = Files.readAllLines(path).get(0);
		builder.setToken(token);
		builder.addEventListeners(new Main());
		builder.build();
	}

	@Override
	public void onMessageReceived(MessageReceivedEvent event) {
		Guild guild = event.getGuild();
		VoiceChannel myChannel = guild.getVoiceChannelsByName("music", true).get(0);
		AudioManager audioManager = guild.getAudioManager();
		AudioPlayerManager audioPM = new DefaultAudioPlayerManager();
		AudioPlayer player = audioPM.createPlayer();
		GuildMusicManager gmm = new GuildMusicManager(audioPM);
		TrackScheduler trackScheduler = new TrackScheduler(player);
		PlayerManager playerManager = PlayerManager.getInstance();
		player.addListener(trackScheduler);
		System.out.println("We received a message from " +
					event.getAuthor().getName() + ": " +
					event.getMessage().getContentDisplay());
		
		String cmd;
		if(event.getMessage().getContentRaw().trim().split(" ").length>1) {
			cmd = event.getMessage().getContentRaw().trim().split(" ")[0].toString();
		}else {
			cmd = event.getMessage().getContentRaw().trim().toString();
		}
		
		switch(cmd) {
			case "!ping":
				event.getChannel().sendMessage("Pong!").queue();
				break;
			case "!say":
				event.getChannel().sendMessage(event.getMessage().getContentRaw().substring(cmd.length()+1)).queue();
				break;
			case "!join":
				audioManager.openAudioConnection(myChannel);
				audioManager.setConnectTimeout(TimeUnit.MINUTES.toMillis(3));
				audioManager.setSendingHandler(new AudioPlayerSendHandler(player));
				audioManager.openAudioConnection(myChannel);
				break;
			case"!leave":
				audioManager.closeAudioConnection();
				break;
			case "!play":
				playerManager.loadAndPlay(event.getTextChannel(), event.getMessage().getContentRaw().substring(cmd.length()+1));
				playerManager.getGuildMusicManager(event.getGuild()).player.setVolume(10);
				break;
			case "!pause":
					gmm.scheduler.onPlayerPause(playerManager.getGuildMusicManager(event.getGuild()).player);
				break;
			case "!playlist":
					String s = "Queue: ";
					for(AudioTrack tr : playerManager.getGuildMusicManager(event.getGuild()).scheduler.getPlaylist()) {
						s+=tr.getInfo().title;
					}
					s.toCharArray()[s.length()-1] = ' ';
					event.getChannel().sendMessage(s.strip()).queue();
				break;
			case "!resume": 
					gmm.scheduler.onPlayerResume(playerManager.getGuildMusicManager(event.getGuild()).player);
				break;
			case "!volume":
				int vol = 0;
				try {
					vol = Integer.parseInt(event.getMessage().getContentRaw().substring(cmd.length()+1));					
				}catch(NumberFormatException nf) {
					System.out.println("Not a number");
					break;
				}
				playerManager.getGuildMusicManager(event.getGuild()).player.setVolume(vol);
				break;
			case "!skip":
					playerManager.getGuildMusicManager(event.getGuild()).scheduler.nextTrack();
					System.out.println("Skipped Song");
				break;
			case "!kick":
				Member author = event.getMessage().getMember();
			    
			    if(!author.hasPermission(Permission.KICK_MEMBERS)) {
			      event.getChannel().sendMessage("You don't have permission to kick people!").queue();
			        return;
			    }
			    List<Member> mentionedMembers = event.getMessage().getMentionedMembers();
			    if(( mentionedMembers).isEmpty()) {
			        event.getChannel().sendMessage("You must mention who you want to be kicked").queue();
			        return;
			    }
			    if(!mentionedMembers.isEmpty()) {
				    String name =mentionedMembers.get(0).getAsMention();

			    	guild.kick(mentionedMembers.get(0)).queue();
			    	event.getChannel().sendMessage("Kicked " +name).queue();
			    }
			    break;
			case "!ban":
				Member person = event.getMessage().getMember();
			    
			    if(!person.hasPermission(Permission.BAN_MEMBERS)) {
			      event.getChannel().sendMessage("You don't have permission to ban people!").queue();
			        return;
			    }
			    List<Member> Member = event.getMessage().getMentionedMembers();

			    if((Member).isEmpty()) {
			        event.getChannel().sendMessage("You must mention who you want to be banned").queue();
			        return;
			    }
			    if(!Member.isEmpty()) {
				    String names =Member.get(0).getAsMention();

			    	guild.ban(Member.get(0), 7).queue();
			    	event.getChannel().sendMessage("Banned " +names).queue();

			    }
			    
			    break;
			case "!mute":
				Member yeeter = event.getMessage().getMember();
				if(!yeeter.hasPermission(Permission.ADMINISTRATOR)) {
				      event.getChannel().sendMessage("You don't have permission to mute people!").queue();
				        return;
				    }
				 List<Member> Membes = event.getMessage().getMentionedMembers();
				    if((Membes).isEmpty()) {
				        event.getChannel().sendMessage("You must mention who you want to be muted").queue();
				        return;
				    }
				    Role role = cmd.matches("(!mute)") ? guild.getRolesByName("muted", true).get(0):null;
				    if(!Membes.isEmpty()) {
					    String nam =Membes.get(0).getAsMention();

				    	guild.addRoleToMember(Membes.get(0), role).queue();
				    	event.getChannel().sendMessage("Muted " +nam).queue();

				    }
				    break;
			case "!unmute":
				Member admin = event.getMessage().getMember();
				if(!admin.hasPermission(Permission.ADMINISTRATOR)) {
				      event.getChannel().sendMessage("You don't have permission to mute people!").queue();
				        return;
				    }
				List<Member> Membe = event.getMessage().getMentionedMembers();
			    if((Membe).isEmpty()) {
			        event.getChannel().sendMessage("You must mention who you want to be unmuted").queue();
			        return;
			    }
			    Role rol = cmd.matches("(!unmute)") ? guild.getRolesByName("muted", true).get(0):null;
			    if(!Membe.isEmpty()) {
				    String nm =Membe.get(0).getAsMention();
			    	guild.removeRoleFromMember(Membe.get(0), rol).queue();
			    	event.getChannel().sendMessage("Unmuted " +nm).queue();

			    }
			    
			case "!addrole":
				Member admi = event.getMessage().getMember();
				if(!admi.hasPermission(Permission.ADMINISTRATOR)) {
				      event.getChannel().sendMessage("You don't have permission to mute people!").queue();
				        return;
				    }
				List<Member> Memb = event.getMessage().getMentionedMembers();
			    String n =Memb.get(0).getAsMention();
			    if((Memb).isEmpty()) {
			        event.getChannel().sendMessage("You must mention who you want to be unmuted").queue();
			        return;
			    }
			    Role ro = cmd.matches("(!addrole)") ? guild.getRolesByName("admin", true).get(0):null;
			    if(!Memb.isEmpty()) {
			    	guild.addRoleToMember(Memb.get(0), ro).queue();
			    	event.getChannel().sendMessage("Add role "+ro.getName() +" to " +n).queue();

			    }
			    break;
			case "!delrole":
				Member adm = event.getMessage().getMember();
				if(!adm.hasPermission(Permission.ADMINISTRATOR)) {
				      event.getChannel().sendMessage("You don't have permission to mute people!").queue();
				        return;
				    }
				List<Member> Mem = event.getMessage().getMentionedMembers();
			    if((Mem).isEmpty()) {
			        event.getChannel().sendMessage("You must mention who you want to be unmuted").queue();
			        return;
			    }
			    Role r = cmd.matches("(!delrole)") ? guild.getRolesByName("admin", true).get(0):null;
			    if(!Mem.isEmpty()) {
			    	String na =Mem.get(0).getAsMention();
			    	guild.removeRoleFromMember(Mem.get(0), r).queue();
			    	event.getChannel().sendMessage("Removed role "+r.getName() +" from " +na).queue();

			    }
			    break;
		}
	}
}
